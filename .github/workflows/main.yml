# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "main" ]  

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install Kubectl
        uses: azure/setup-kubectl@v3   
        with:
          version: 'v1.21.3' 
        id: install  

      - name: Configure aws creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr   

      - name: Build docker Image and Push and scan the Vulnerbality
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: node-app 
          IMAGE_TAG: $(echo ${{ github.sha }} | head -c 8)
        run: |
          docker build -t $REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} .
          docker push $REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: node-app 
          IMAGE_TAG: $(echo ${{ github.sha }} | head -c 8)
        run:
          DOCKER=$REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}  
        with:
          image-ref: '$DOCKER'    
          
      - name: Configure the deployment file
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: node-app 
          IMAGE_TAG: $(echo ${{ github.sha }} | head -c 8)
        run: |
          DOCKER=$REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}
          sed -i 's@CONTAINER_IMAGE@'"$DOCKER"'@' deployment.yml
      
      - name: Deploy the application     
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - run: |
          kubectl get node    
          kubectl apply -f deployment.yml